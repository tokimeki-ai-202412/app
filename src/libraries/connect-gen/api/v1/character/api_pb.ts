// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=.ts"
// @generated from file api/v1/character/api.proto (package api.v1.character, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Character } from "../../../model/v1/character_pb.ts";

/**
 * @generated from message api.v1.character.ListCharactersRequest
 */
export class ListCharactersRequest extends Message<ListCharactersRequest> {
  constructor(data?: PartialMessage<ListCharactersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.character.ListCharactersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListCharactersRequest {
    return new ListCharactersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListCharactersRequest {
    return new ListCharactersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListCharactersRequest {
    return new ListCharactersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListCharactersRequest | PlainMessage<ListCharactersRequest> | undefined, b: ListCharactersRequest | PlainMessage<ListCharactersRequest> | undefined): boolean {
    return proto3.util.equals(ListCharactersRequest, a, b);
  }
}

/**
 * @generated from message api.v1.character.ListCharactersResponse
 */
export class ListCharactersResponse extends Message<ListCharactersResponse> {
  /**
   * @generated from field: repeated model.v1.Character characters = 1;
   */
  characters: Character[] = [];

  constructor(data?: PartialMessage<ListCharactersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.character.ListCharactersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "characters", kind: "message", T: Character, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListCharactersResponse {
    return new ListCharactersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListCharactersResponse {
    return new ListCharactersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListCharactersResponse {
    return new ListCharactersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListCharactersResponse | PlainMessage<ListCharactersResponse> | undefined, b: ListCharactersResponse | PlainMessage<ListCharactersResponse> | undefined): boolean {
    return proto3.util.equals(ListCharactersResponse, a, b);
  }
}

/**
 * @generated from message api.v1.character.GetCharacterRequest
 */
export class GetCharacterRequest extends Message<GetCharacterRequest> {
  /**
   * @generated from field: string character_id = 1;
   */
  characterId = "";

  constructor(data?: PartialMessage<GetCharacterRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.character.GetCharacterRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "character_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCharacterRequest {
    return new GetCharacterRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCharacterRequest {
    return new GetCharacterRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCharacterRequest {
    return new GetCharacterRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCharacterRequest | PlainMessage<GetCharacterRequest> | undefined, b: GetCharacterRequest | PlainMessage<GetCharacterRequest> | undefined): boolean {
    return proto3.util.equals(GetCharacterRequest, a, b);
  }
}

/**
 * @generated from message api.v1.character.GetCharacterResponse
 */
export class GetCharacterResponse extends Message<GetCharacterResponse> {
  /**
   * @generated from field: model.v1.Character character = 1;
   */
  character?: Character;

  constructor(data?: PartialMessage<GetCharacterResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.character.GetCharacterResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "character", kind: "message", T: Character },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCharacterResponse {
    return new GetCharacterResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCharacterResponse {
    return new GetCharacterResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCharacterResponse {
    return new GetCharacterResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetCharacterResponse | PlainMessage<GetCharacterResponse> | undefined, b: GetCharacterResponse | PlainMessage<GetCharacterResponse> | undefined): boolean {
    return proto3.util.equals(GetCharacterResponse, a, b);
  }
}

/**
 * @generated from message api.v1.character.CreateCharacterRequest
 */
export class CreateCharacterRequest extends Message<CreateCharacterRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string thumbnail_path = 2;
   */
  thumbnailPath = "";

  constructor(data?: PartialMessage<CreateCharacterRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.character.CreateCharacterRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "thumbnail_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateCharacterRequest {
    return new CreateCharacterRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateCharacterRequest {
    return new CreateCharacterRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateCharacterRequest {
    return new CreateCharacterRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateCharacterRequest | PlainMessage<CreateCharacterRequest> | undefined, b: CreateCharacterRequest | PlainMessage<CreateCharacterRequest> | undefined): boolean {
    return proto3.util.equals(CreateCharacterRequest, a, b);
  }
}

/**
 * @generated from message api.v1.character.CreateCharacterResponse
 */
export class CreateCharacterResponse extends Message<CreateCharacterResponse> {
  /**
   * @generated from field: model.v1.Character character = 1;
   */
  character?: Character;

  constructor(data?: PartialMessage<CreateCharacterResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.character.CreateCharacterResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "character", kind: "message", T: Character },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateCharacterResponse {
    return new CreateCharacterResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateCharacterResponse {
    return new CreateCharacterResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateCharacterResponse {
    return new CreateCharacterResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateCharacterResponse | PlainMessage<CreateCharacterResponse> | undefined, b: CreateCharacterResponse | PlainMessage<CreateCharacterResponse> | undefined): boolean {
    return proto3.util.equals(CreateCharacterResponse, a, b);
  }
}

/**
 * @generated from message api.v1.character.UpdateCharacterRequest
 */
export class UpdateCharacterRequest extends Message<UpdateCharacterRequest> {
  /**
   * @generated from field: model.v1.Character character = 1;
   */
  character?: Character;

  constructor(data?: PartialMessage<UpdateCharacterRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.character.UpdateCharacterRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "character", kind: "message", T: Character },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateCharacterRequest {
    return new UpdateCharacterRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateCharacterRequest {
    return new UpdateCharacterRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateCharacterRequest {
    return new UpdateCharacterRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateCharacterRequest | PlainMessage<UpdateCharacterRequest> | undefined, b: UpdateCharacterRequest | PlainMessage<UpdateCharacterRequest> | undefined): boolean {
    return proto3.util.equals(UpdateCharacterRequest, a, b);
  }
}

/**
 * @generated from message api.v1.character.UpdateCharacterResponse
 */
export class UpdateCharacterResponse extends Message<UpdateCharacterResponse> {
  /**
   * @generated from field: model.v1.Character character = 1;
   */
  character?: Character;

  constructor(data?: PartialMessage<UpdateCharacterResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.character.UpdateCharacterResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "character", kind: "message", T: Character },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateCharacterResponse {
    return new UpdateCharacterResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateCharacterResponse {
    return new UpdateCharacterResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateCharacterResponse {
    return new UpdateCharacterResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateCharacterResponse | PlainMessage<UpdateCharacterResponse> | undefined, b: UpdateCharacterResponse | PlainMessage<UpdateCharacterResponse> | undefined): boolean {
    return proto3.util.equals(UpdateCharacterResponse, a, b);
  }
}

/**
 * @generated from message api.v1.character.DeleteCharacterRequest
 */
export class DeleteCharacterRequest extends Message<DeleteCharacterRequest> {
  /**
   * @generated from field: string character_id = 1;
   */
  characterId = "";

  constructor(data?: PartialMessage<DeleteCharacterRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.character.DeleteCharacterRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "character_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteCharacterRequest {
    return new DeleteCharacterRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteCharacterRequest {
    return new DeleteCharacterRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteCharacterRequest {
    return new DeleteCharacterRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteCharacterRequest | PlainMessage<DeleteCharacterRequest> | undefined, b: DeleteCharacterRequest | PlainMessage<DeleteCharacterRequest> | undefined): boolean {
    return proto3.util.equals(DeleteCharacterRequest, a, b);
  }
}

/**
 * @generated from message api.v1.character.DeleteCharacterResponse
 */
export class DeleteCharacterResponse extends Message<DeleteCharacterResponse> {
  constructor(data?: PartialMessage<DeleteCharacterResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.character.DeleteCharacterResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteCharacterResponse {
    return new DeleteCharacterResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteCharacterResponse {
    return new DeleteCharacterResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteCharacterResponse {
    return new DeleteCharacterResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteCharacterResponse | PlainMessage<DeleteCharacterResponse> | undefined, b: DeleteCharacterResponse | PlainMessage<DeleteCharacterResponse> | undefined): boolean {
    return proto3.util.equals(DeleteCharacterResponse, a, b);
  }
}

