// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=.ts"
// @generated from file api/v1/artifact/api.proto (package api.v1.artifact, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Artifact, ArtifactInput } from "../../../model/v1/artifact_pb.ts";

/**
 * @generated from message api.v1.artifact.ListArtifactsRequest
 */
export class ListArtifactsRequest extends Message<ListArtifactsRequest> {
  /**
   * @generated from field: string character_id = 1;
   */
  characterId = "";

  constructor(data?: PartialMessage<ListArtifactsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.artifact.ListArtifactsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "character_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListArtifactsRequest {
    return new ListArtifactsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListArtifactsRequest {
    return new ListArtifactsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListArtifactsRequest {
    return new ListArtifactsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListArtifactsRequest | PlainMessage<ListArtifactsRequest> | undefined, b: ListArtifactsRequest | PlainMessage<ListArtifactsRequest> | undefined): boolean {
    return proto3.util.equals(ListArtifactsRequest, a, b);
  }
}

/**
 * @generated from message api.v1.artifact.ListArtifactsResponse
 */
export class ListArtifactsResponse extends Message<ListArtifactsResponse> {
  /**
   * @generated from field: repeated model.v1.Artifact artifacts = 1;
   */
  artifacts: Artifact[] = [];

  constructor(data?: PartialMessage<ListArtifactsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.artifact.ListArtifactsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "artifacts", kind: "message", T: Artifact, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListArtifactsResponse {
    return new ListArtifactsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListArtifactsResponse {
    return new ListArtifactsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListArtifactsResponse {
    return new ListArtifactsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListArtifactsResponse | PlainMessage<ListArtifactsResponse> | undefined, b: ListArtifactsResponse | PlainMessage<ListArtifactsResponse> | undefined): boolean {
    return proto3.util.equals(ListArtifactsResponse, a, b);
  }
}

/**
 * @generated from message api.v1.artifact.GetArtifactRequest
 */
export class GetArtifactRequest extends Message<GetArtifactRequest> {
  /**
   * @generated from field: string artifact_id = 1;
   */
  artifactId = "";

  constructor(data?: PartialMessage<GetArtifactRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.artifact.GetArtifactRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "artifact_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetArtifactRequest {
    return new GetArtifactRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetArtifactRequest {
    return new GetArtifactRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetArtifactRequest {
    return new GetArtifactRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetArtifactRequest | PlainMessage<GetArtifactRequest> | undefined, b: GetArtifactRequest | PlainMessage<GetArtifactRequest> | undefined): boolean {
    return proto3.util.equals(GetArtifactRequest, a, b);
  }
}

/**
 * @generated from message api.v1.artifact.GetArtifactResponse
 */
export class GetArtifactResponse extends Message<GetArtifactResponse> {
  /**
   * @generated from field: model.v1.Artifact artifact = 1;
   */
  artifact?: Artifact;

  constructor(data?: PartialMessage<GetArtifactResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.artifact.GetArtifactResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "artifact", kind: "message", T: Artifact },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetArtifactResponse {
    return new GetArtifactResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetArtifactResponse {
    return new GetArtifactResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetArtifactResponse {
    return new GetArtifactResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetArtifactResponse | PlainMessage<GetArtifactResponse> | undefined, b: GetArtifactResponse | PlainMessage<GetArtifactResponse> | undefined): boolean {
    return proto3.util.equals(GetArtifactResponse, a, b);
  }
}

/**
 * @generated from message api.v1.artifact.CreateArtifactRequest
 */
export class CreateArtifactRequest extends Message<CreateArtifactRequest> {
  /**
   * @generated from field: model.v1.ArtifactInput input = 1;
   */
  input?: ArtifactInput;

  /**
   * @generated from field: string character_id = 2;
   */
  characterId = "";

  constructor(data?: PartialMessage<CreateArtifactRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.artifact.CreateArtifactRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "input", kind: "message", T: ArtifactInput },
    { no: 2, name: "character_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateArtifactRequest {
    return new CreateArtifactRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateArtifactRequest {
    return new CreateArtifactRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateArtifactRequest {
    return new CreateArtifactRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateArtifactRequest | PlainMessage<CreateArtifactRequest> | undefined, b: CreateArtifactRequest | PlainMessage<CreateArtifactRequest> | undefined): boolean {
    return proto3.util.equals(CreateArtifactRequest, a, b);
  }
}

/**
 * @generated from message api.v1.artifact.CreateArtifactResponse
 */
export class CreateArtifactResponse extends Message<CreateArtifactResponse> {
  /**
   * @generated from field: model.v1.Artifact artifact = 1;
   */
  artifact?: Artifact;

  constructor(data?: PartialMessage<CreateArtifactResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.artifact.CreateArtifactResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "artifact", kind: "message", T: Artifact },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateArtifactResponse {
    return new CreateArtifactResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateArtifactResponse {
    return new CreateArtifactResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateArtifactResponse {
    return new CreateArtifactResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateArtifactResponse | PlainMessage<CreateArtifactResponse> | undefined, b: CreateArtifactResponse | PlainMessage<CreateArtifactResponse> | undefined): boolean {
    return proto3.util.equals(CreateArtifactResponse, a, b);
  }
}

/**
 * @generated from message api.v1.artifact.CancelArtifactRequest
 */
export class CancelArtifactRequest extends Message<CancelArtifactRequest> {
  /**
   * @generated from field: string artifact_id = 1;
   */
  artifactId = "";

  constructor(data?: PartialMessage<CancelArtifactRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.artifact.CancelArtifactRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "artifact_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CancelArtifactRequest {
    return new CancelArtifactRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CancelArtifactRequest {
    return new CancelArtifactRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CancelArtifactRequest {
    return new CancelArtifactRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CancelArtifactRequest | PlainMessage<CancelArtifactRequest> | undefined, b: CancelArtifactRequest | PlainMessage<CancelArtifactRequest> | undefined): boolean {
    return proto3.util.equals(CancelArtifactRequest, a, b);
  }
}

/**
 * @generated from message api.v1.artifact.CancelArtifactResponse
 */
export class CancelArtifactResponse extends Message<CancelArtifactResponse> {
  /**
   * @generated from field: model.v1.Artifact artifact = 1;
   */
  artifact?: Artifact;

  constructor(data?: PartialMessage<CancelArtifactResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.artifact.CancelArtifactResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "artifact", kind: "message", T: Artifact },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CancelArtifactResponse {
    return new CancelArtifactResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CancelArtifactResponse {
    return new CancelArtifactResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CancelArtifactResponse {
    return new CancelArtifactResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CancelArtifactResponse | PlainMessage<CancelArtifactResponse> | undefined, b: CancelArtifactResponse | PlainMessage<CancelArtifactResponse> | undefined): boolean {
    return proto3.util.equals(CancelArtifactResponse, a, b);
  }
}

/**
 * @generated from message api.v1.artifact.DeleteArtifactRequest
 */
export class DeleteArtifactRequest extends Message<DeleteArtifactRequest> {
  /**
   * @generated from field: string artifact_id = 1;
   */
  artifactId = "";

  constructor(data?: PartialMessage<DeleteArtifactRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.artifact.DeleteArtifactRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "artifact_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteArtifactRequest {
    return new DeleteArtifactRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteArtifactRequest {
    return new DeleteArtifactRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteArtifactRequest {
    return new DeleteArtifactRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteArtifactRequest | PlainMessage<DeleteArtifactRequest> | undefined, b: DeleteArtifactRequest | PlainMessage<DeleteArtifactRequest> | undefined): boolean {
    return proto3.util.equals(DeleteArtifactRequest, a, b);
  }
}

/**
 * @generated from message api.v1.artifact.DeleteArtifactResponse
 */
export class DeleteArtifactResponse extends Message<DeleteArtifactResponse> {
  constructor(data?: PartialMessage<DeleteArtifactResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.artifact.DeleteArtifactResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteArtifactResponse {
    return new DeleteArtifactResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteArtifactResponse {
    return new DeleteArtifactResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteArtifactResponse {
    return new DeleteArtifactResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteArtifactResponse | PlainMessage<DeleteArtifactResponse> | undefined, b: DeleteArtifactResponse | PlainMessage<DeleteArtifactResponse> | undefined): boolean {
    return proto3.util.equals(DeleteArtifactResponse, a, b);
  }
}

